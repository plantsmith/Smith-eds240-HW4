---
title: "HW 2: Exploration "
format: 
  html:
    code-fold: true
    toc: true
    number-sections: true
    embed-resources: true
theme: Litera
editor: visual
---

Load Libraries

```{r}
#| message: false
#| warning: false

#libraries: 
library(tidyverse)   # dplyr, purrr, etc.
library(janitor)     # for clean_names()
library(lubridate)   # for mdy(), etc
library(here)        # for here()
library(sf)          # spatial data
library(doBy)        # for summaryBy()
```

## AQI

### Median AQI

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# data ranges from 2000 - 2024
years <- 2000:2024

# -------- S E T  U P  L O O P  --------
median_aqi_list <- map(years, ~ {
  
      # build the file path
  aqi_file_path <- here("data/aqi_daily", paste0("aqidaily_", .x, ".csv"))
  
# -------- R E A D  I N  D A T A --------
  read_csv(aqi_file_path) %>%
    clean_names() %>%
    
# -------- T I D Y--------
      #transform date from a character to a date
    mutate(date = mdy(date)) %>%
    
      #extract year
    mutate(year = year(date)) %>% 

      #calculate median AQI
    group_by(year) %>%
    summarize(
      median_aqi = median(overall_aqi_value, na.rm = TRUE),
      .groups = "drop")
    
})

# combine into one data frame
median_aqi_df <- bind_rows(median_aqi_list)

```

### Visualize

####1)

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

ggplot(median_aqi_df, aes(x = year, y = median_aqi)) +
 geom_line() + 
  geom_point() +
  labs(x = " ", y = "Median AQI") +
  
    scale_y_continuous(
    limits = c(60, 105),
    breaks = seq(60, 100, by = 10)
 ) +
  
    scale_x_continuous(
    limits = c(2000, 2024), # Set axis range
    breaks = seq(2000, 2024, by = 2), 
  ) +
  
  theme_minimal() +
  #remove gridlines
  theme(
    # panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
    )

```

#### 2)

```{r}
ggplot(median_aqi_df, aes(x = year, y = median_aqi)) +
  labs(x = " ", y = "Median AQI") +
  
  # Add colored axis lines
  geom_segment(aes(x = 2000, xend = 2000, y = 50, yend = 60), color = "#88B589", linewidth = 2) +
  geom_segment(aes(x = 2000, xend = 2000, y = 60, yend = 100), color = "#F3D03E", linewidth = 2) +
  geom_segment(aes(x = 2000, xend = 2000, y = 100, yend = 105), color = "#E67E52", linewidth = 2) +
  
  geom_line() + 
  geom_point() +
  
  scale_y_continuous(
    limits = c(50, 105),
    breaks = seq(50, 100, by = 10)
  ) +
  
  scale_x_continuous(
    limits = c(2000, 2024),
    breaks = seq(2000, 2024, by = 5)
  ) +
  
  theme_minimal() +
  
  theme(
    panel.grid.major.y = element_line(color = "gray90"),
    panel.grid.minor.y = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    
    axis.line.y = element_blank(),
    
    axis.title = element_blank(),   # Remove axis titles

  )
```

nice colors: \# Add colored axis lines geom_segment(aes(x = 2000, xend = 2000, y = 50, yend = 60), color = "#F3D03E", linewidth = 2) + geom_segment(aes(x = 2000, xend = 2000, y = 60, yend = 100), color = "#9BC4A7", linewidth = 2) + geom_segment(aes(x = 2000, xend = 2000, y = 100, yend = 105), color = "#E88D67", linewidth = 2) +

#### 3)

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

ggplot(median_aqi_df, aes(x = year, y = median_aqi)) +
  
  geom_line() + 
  geom_point() +
  
  scale_y_continuous(
    limits = c(1, 110),
    breaks = seq(0, 100, by = 10)
 ) +
  
  scale_x_continuous(
    limits = c(2000, 2024), # Set axis range
    breaks = seq(2000, 2024, by = 2),  
  ) +

  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
)
```

#### 4)

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false


ggplot(median_aqi_df, aes(x = year, y = median_aqi)) +
  
#------BACKGROUND------  
  # Add AQI threshold background colors
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 40, ymax = 50, 
           fill = "#88B589", alpha = 0.3) +
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 50, ymax = 100, 
           fill = "#F3D03E", alpha = 0.2) +
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 100, ymax = 110, 
           fill = "#E67E52", alpha = 0.2) +
  
  
  # Add category labels
  # GOOD
  annotate("text", 
           x = 2023, 
           y = 45, 
           label = "Good", 
           hjust = 1,
           fontface = "plain",
           family = "Arial",
           size = 3.5) +
  # MODERATE
  annotate("text", 
           x = 2023, 
           y = 62, 
           label = "Moderate",
           hjust = 1,
           fontface = "plain",
           family = "Arial",
           size = 3.5) +
  # UNHEALTHY
  annotate("text", 
           x = 2023, 
           y = 105, 
           label = "Unhealthy for\nSensitive Groups", 
           hjust = 1,
           fontface = "plain",
           family = "Arial",
           size = 3.5) +
  
#------FOREGROUND------    
    
  geom_line() + 
  geom_point() +
  
  scale_y_continuous(
    limits = c(40, 110),
    breaks = seq(40, 105, by = 10)
  ) +
  
  scale_x_continuous(
    limits = c(2000, 2024),
    breaks = seq(2000, 2024, by = 5),
    minor_breaks = seq(2000, 2024, by = 1)
  ) +
  
  coord_fixed(ratio = 1/4) +
  
  theme_minimal() +
  
  theme(
    
    #AXES
    axis.title = element_blank(),   # Remove axis titles
    axis.text.y = element_blank(),
    axis.text.x = element_text(margin = margin(r = 1)),
    
    #GRIDLINES
    panel.grid.minor.y = element_blank(),  
    # Keep x-axis minor gridlines but make them very light
    # panel.grid.minor.x = element_line(color = "grey90"), 
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank()
    
    # AXIS TICKS
    # axis.ticks.x = element_line(),  # Show axis ticks
    # axis.ticks.length = unit(2, "pt"), # Adjust tick length if needed
    
  )
```

#### 5)

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

ggplot(median_aqi_df, aes(x = year, y = median_aqi)) +
  
#------BACKGROUND------  
  # Add AQI threshold background colors
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 40, ymax = 50, 
           fill = "#90EE90", alpha = 0.25) +
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 50, ymax = 100, 
           fill = "#ffff00", alpha = 0.15) +
  annotate("rect", xmin = 2000, xmax = 2024, ymin = 100, ymax = 110, 
           fill = "#ff7e00", alpha = 0.15) +
  
  # Add category labels with improved typography
  annotate("text", 
           x = 2023, 
           y = 45, 
           label = "Good", 
           hjust = 1,
           family = "Arial",
           size = 3,
           color = "grey25") +
  annotate("text", 
           x = 2023, 
           y = 62, 
           label = "Moderate",
           hjust = 1,
           family = "Arial",
           size = 3,
           color = "grey25") +
  annotate("text", 
           x = 2023, 
           y = 105, 
           label = "Unhealthy for\nSensitive Groups", 
           hjust = 1,
           family = "Arial",
           size = 3,
           color = "grey25") +
  
#------FOREGROUND------    
  geom_line(linewidth = 0.7) + 
  geom_point(size = 2) +
  
  scale_y_continuous(
    limits = c(40, 110),
    breaks = seq(40, 105, by = 10)
  ) +
  
  scale_x_continuous(
    limits = c(2000, 2024),
    breaks = seq(2000, 2024, by = 5),
    minor_breaks = seq(2000, 2024, by = 1)
  ) +
  
  coord_fixed(ratio = 1/4) +
  
  theme_minimal() +
  theme(
    #TEXT
    text = element_text(family = "Arial", color = "grey25"),
    
    #AXES
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.text = element_text(size = 8),
    
    #GRIDLINES
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.major.x = element_blank(),
    # panel.grid.major.x = element_line(color = "grey90"),
    
    #PLOT BORDER
    panel.border = element_rect(color = "grey90", fill = NA, linewidth = 0.5)
 
#     panel.border = element_blank(),
#     axis.line = element_line(color = "grey96"),
#     # or individual axes
#     axis.line.x = element_line(color = "grey96")
)
```

Notes: fix scaling, aspect, overlay EPA's air quality standards as a reference line.

Events: California Diesel Risk Reduction Program (2000), 2005: The SCAQMD developed Clean Fleet rules to reduce diesel exhaust, decomissioning coal plants (?), 2003, SCAQMD implemented "Check Before You Burn, 2020 spike due to wildfire (?)

### Main Pollutant in AQI

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# -------- S E T  U P  L O O P  --------
common_pollutant_list <- map(years, ~ {
  
  # file path
  aqi_file_path <- here("data/aqi_daily", paste0("aqidaily_", .x, ".csv"))
  
  # -------- R E A D  I N  D A T A --------
  read_csv(aqi_file_path) %>%
    clean_names() %>%
    
    # character to date
    mutate(date = mdy(date)) %>%
    
    # extract year
    mutate(year = year(date)) %>%
    
    select(year, main_pollutant)

})

# Combine all common pollutant calculations into one data frame
common_pollutant_all <- bind_rows(common_pollutant_list)


```

### Visualize 1.0

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

ggplot(common_pollutant_all, aes(x = main_pollutant)) +
  geom_bar() + 
  coord_flip()

```

Id love for this to be circles with size showing count...

```{r}
# ---------- SUMMARIZE BY YEAR ---------

# count occurrences of pollutants for the year
top_pollutants <- common_pollutant_all %>% 
  group_by(year, main_pollutant) %>%
  summarize(count = n(), .groups = "drop") %>% 

  group_by(main_pollutant) %>%
  summarize(avg_count = mean(count), .groups = "drop")



```

### Visualize 2.0

```{r}
library(dplyr)
library(packcircles)
library(ggplot2)

# -------- STEP 1:Compute circle layout----------

# circleProgressiveLayoutcalculates the positions and sizes of circles to create a non-overlapping
circle_layout <- circleProgressiveLayout(top_pollutants$avg_count, sizetype = "area")

# Add a small gap between circles
circle_layout$radius <- circle_layout$radius * 0.95

# Add coordinates back to the pollutant data
circle_data <- cbind(top_pollutants, circle_layout)

# create vertices for circle polygons
circle_vertices <- circleLayoutVertices(circle_layout, npoints = 50)

# -------- STEP 2: ADD NESTED CIRCLES ----------
# Generate radius, x, and y coordinates for nested circles
circle_layout_border <- circle_layout
circle_layout_border$radius <- circle_layout$radius * 0.95

# Create vertices for nested circles
circle_vertices_border <- circleLayoutVertices(circle_layout_border, npoints = 50)

# # -------- STEP 3: JOIN TABLES TO ADD LABELS ----------
# 
# Combine the pollutant data with circles (center coordinates and radius)
circle_labels <- cbind(top_pollutants, circle_layout)


```

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

# -------- STEP 4: BASE PLOT(s) ----------

#plot the circles
gg_circles <- ggplot() +
  geom_polygon(data = circle_vertices, 
               aes(x = x, y = y, group = id, fill = as.factor(id)), 
               color = "black", alpha = 0.6) +
  theme_void() +
  coord_equal() +
  labs(fill = "Pollutant")


# add nested circles

gg_circles_nested <- gg_circles +
 geom_polygon(data = circle_vertices_border,
              aes(x = x, y = y, group = id, fill = as.factor(id)),
            colour = "black", alpha = 0.3) +
  theme_void()


```

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

# custom red colors:
custom_red_palette <- c("#FFCCCC", "#FF9999", "#FF6666", "#FF3333", "#CC0000")

gg_circles_with_labels <- gg_circles_nested +
  geom_text(data = circle_labels,
            aes(x = x, y = y, size = avg_count, label = main_pollutant), # Add labels to the centers of the circles
            # fontface = "bold",
            color = "black") +
  scale_fill_manual(values = custom_red_palette) +  # Apply custom red palette
  scale_size_continuous(range = c(1.5, 6)) +

  theme_void() +  # Minimalist theme
  theme(legend.position = "none"
  ) +
  coord_equal()  # Ensure circles are proportional

gg_circles_with_labels


```

alt:

```{r}

pal_1 <- c("#FEF6D3", "#F3D03E", "#E67E52", "#E04D40", "#CC3333")  
pal_2 <- c("#FFF2D1", "#F3D03E", "#EB865A", "#E35745", "#D42E2E")  

# Create the base visualization with the main circles
gg_circles <- ggplot() +
 # Draw the main circles
 geom_polygon(data = circle_vertices, 
              aes(x = x, y = y, group = id, fill = as.factor(id)), 
              color = "white",          # add white borders
              size = 0.2,              # thinner border 
              alpha = 0.8) +           
 theme_void() +                       
 coord_equal()                       # ensure circles are perfectly round
     

# Add the nested circles layer
gg_circles_nested <- gg_circles +

 geom_polygon(data = circle_vertices_border,
              aes(x = x, y = y, group = id, fill = as.factor(id)),
              color = "white",        # match border color of main circles
              size = 0.2,           
              alpha = 0.5)            # more transparent for nested effect

# Add text & style
main_pollutant_circles <- gg_circles_nested +
 # Add text labels inside the circles
 geom_text(data = circle_labels,
           aes(x = x, y = y, 
               size = avg_count,      # text size varies with pollution count
               label = main_pollutant), 
           fontface = "bold",      
           family = "Arial",          
           color = "#2F2F2F") +       # dark grey 
 scale_fill_manual(values = pal_2) +  # custom color palette
 scale_size_continuous(range = c(2, 7)) + # set text size range (small --> large)
 
 theme_void() +                      
 
 theme(
  
   text = element_text(family = "Arial"),
   
   plot.background = element_rect(fill = "white", color = NA), # white background

   plot.margin = margin(20, 20, 20, 20),    # margins (padding)
  
   legend.position = "none"  # remove legend
 )


main_pollutant_circles
```

```{r}
#| eval: false
#| echo: false
#| message: false
#| warning: false
#| output: false

# Calculate Percentages:
# Add a new column with the percentage of the average frequency of pollutants
circle_labels$percent <- round(
  circle_labels$avg_count / sum(circle_labels$avg_count) * 100
)

# custom red colors:
custom_red_palette <- c("#FFCCCC", "#FF9999", "#FF6666", "#FF3333", "#CC0000")

# Add percentage labels inside circles
gg_circles_nested +
  geom_text(
    data = circle_labels,
    aes(x = x, y = y, size = avg_count, label = paste0(percent, "%")),  # Show percentages only
    show.legend = FALSE  # Ensure text size doesn't appear in legend
  ) +
  scale_size_continuous(range = c(2, 10)) +  # Adjust text size scaling
  scale_fill_manual(
    values = custom_red_palette,  # Use custom color palette
    labels = circle_labels$main_pollutant  # Map pollutant names to legend
  ) +
  guides(fill = guide_legend(
    nrow = 3,
    direction = "horizontal",
    title = NULL,
    label.theme = element_text(size = 7, margin = margin(l = 0.5)),
    keywidth = unit(7, "pt"),
    keyheight = unit(7, "pt"))
  ) +
  theme_void() +  # Clean theme
  theme(
    legend.position = c(1.05, 0.15)  # Adjust legend position
  )

```

# Individual Pollutants

## PM 2.5 Single Pollutant

After exploring the data, I dont think I will use these datasets.

### Tidy

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

PM2_5_df <- read.csv(here("data/pm_annual.csv")) %>% 
  clean_names()

PM2_5 <- PM2_5_df %>%
  
  # transform date from a character to a date
  mutate(date = mdy(date)) %>%
  
  # create new columns for month, day, and year using lubridate
  mutate(
    month = month(date),  
    day   = day(date),    
    year  = year(date)    
  ) %>%
  
  # select only the columns we need
  select(daily_mean_pm2_5_concentration, units, year, month) 

# -------- F I N D   A N N U A L  M E A N --------  
   annual_PM2_5 <- PM2_5  %>%  
  group_by(year) %>%
    summarize(
      units = first(units),
      yearly_mean_pm2_5 = mean(daily_mean_pm2_5_concentration, na.rm = TRUE),
      .groups = "drop"
    )

```

### Visualize by Year

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

ggplot(annual_PM2_5, aes(x = year, y = yearly_mean_pm2_5)) +
  geom_line() + 
  geom_point() +
  labs(x = "Year", y = "Mean PM2.5 (µg/m³)") +
  theme_bw()



ggplot(annual_PM2_5, aes(x = year, y = yearly_mean_pm2_5)) +
  geom_line() + 
  geom_point() +
  labs(x = "Year", y = "Mean PM2.5 (µg/m³)") +
  theme_bw() +
  coord_fixed(ratio = 1/2) +
  scale_y_continuous(breaks = seq(0, 21, by = 5)) 


```

### Visualize by Month

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false


monthly_PM2_5 <- PM2_5 %>% 
   group_by(month) %>%
    summarize(
      units = first(units),
      monthly_mean_pm2_5 = mean(daily_mean_pm2_5_concentration, na.rm = TRUE),
      .groups = "drop"
    )
  
```

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

ggplot(monthly_PM2_5, aes(x = month, y = monthly_mean_pm2_5)) +
  geom_bar(stat = "identity") +
  labs(x = "Month (2000-2024)", y = "Mean PM2.5 (µg/m³)") +
  coord_fixed(ratio = 0.5) +
  theme_bw()
```

## Ozone

### Tidy

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

#read in data and clean names
annual_ozone <- read.csv(here("data/ozone_annual.csv")) %>% 
  clean_names()

annual_ozone <- annual_ozone %>% 
# transform date from a character to a date
  mutate(date = mdy(date)) %>%
  
# create new columns for month, day, and year using lubridate
  mutate(
    month = month(date),  
    day   = day(date),    
    year  = year(date)    
  ) %>% 
  
# group by year to show count of how many days per year exceed 0.070 ppm
  group_by(year) %>%
  summarize(days_over_070 = sum(daily_max_8_hour_ozone_concentration > 0.070, na.rm = TRUE))

```

### Visualize

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# make a bar graph 
ggplot(annual_ozone, aes(x = year, y = days_over_070)) +
  geom_col()

#this is cool but id rather have it in buckets of unhealthy for sensi, unhealthy, and v unhealthy - stacked bar/area
```

# Census and Socioeconomic Data

## Enviroscreen (tabular) - Tidy

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# read in enviroscreen data and clean names
ES_full <- read.csv(here("data/enviroscreen/enviroscreen_csv/enviroscreen_data.csv")) %>% 
  clean_names()

# ----- TIDY DATA ------
es_df <- ES_full %>% 
  # filter to only show LA County
  filter(california_county == "Los Angeles") %>% 
  # select for the relevant columns
  select(census_tract, 
         california_county, 
         total_population,
         zip,
         approximate_location,
         longitude,
         latitude,
         ozone,
         pm2_5,
         diesel_pm,
         tox_release,
         traffic,
         asthma,
         poverty,
)

# filter dataset for Los Angeles County
top_10_pm2_5  <- es_df %>% 
  filter(california_county == "Los Angeles")

top_10_pm2_5 <- top_10_pm2_5  %>%
  group_by(zip) %>% 
      # calculate the mean PM2.5 for each zip
  mutate(mean_pm2_5 = mean(pm2_5, na.rm = TRUE)) %>% 
  ungroup() %>%
      # arrange by the mean
  arrange(desc(mean_pm2_5)) %>% 
      # keep one row per zip
  distinct(zip, .keep_all = TRUE) %>% 
      # select the top 10 zip codes
  slice(1:10) 


```

Top 10 Zip Codes w highest mean PM 2.5:

-   91335 Reseda
-   91711 Claremont
-   91767 Pomona
-   90012 Downtown Los Angeles
-   91316 Encino
-   91766 Pomona
-   90031 Lincoln Heights --\> **MY HOUSE!**
-   90071 Bunker Hill/DTLA
-   90033 Boyle Heights
-   91406 Van Nuys

## Enviroscreen (spatial) - Tidy
```{r}
unincorp <- enviroscreen_sf %>% 
  filter(zip =="91311")
```


```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# --------------------Spatial Data-----------------------
# bring in enviroscreen shapefile
enviroscreen_sf <- read_sf(here("data/enviroscreen/enviroscreen_shapefiles/CES4_final_shapefile.shp")) %>% 
  clean_names() 

#-------- Tidy Data-------------

# Define excluded locations and identifiers
excluded_locations <- c("Santa Clarita", "Palmdale", "Lancaster", "Acton", 
                       "Agua Dulce", "Altadena", "Lake Los Angeles",
                       "Leona Valley", "La Crescenta-Montrose")

excluded_tracts <- c("6037911001", "6037910002", "6037403325", "6037104124",
                     "6037920326", "6037930301", "6037910709", "6037920303")

excluded_zips <- c("90265", "93535", "1733", "93552", "93532", "90704",
                   "91384", "91387", "91390", "93510", "93536", "91351",
                   "91011", "91355", "93551", "91342", "91381")

# Tidy data with simplified filtering
enviroscreen_sf <- enviroscreen_sf %>% 
  filter(county == "Los Angeles") %>% 
  select(tract, 
         zip,
         approx_loc,
         pm2_5_p,
         geometry,  
         county) %>% 
  filter(!approx_loc %in% excluded_locations) %>%
  filter(!tract %in% excluded_tracts) %>%
  filter(!zip %in% excluded_zips)
  

```
```{r}
# plot w envirosreen
es_plot <- ggplot() +
  geom_sf(data = enviroscreen_sf, aes(fill = pm2_5_p), color = 'black', size = 1) +
  scale_fill_distiller(palette = "OrRd", direction = 1) +
  theme_minimal() +
  labs(fill = "PM2.5 Percentile") +
  theme(
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    axis.text = element_blank(),
    axis.title = element_blank())+
  theme_void()

es_plot
```


## MY CENSUS IS BROKE
```{r}

```


## Tidy Census

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

library(sf)
library(tidycensus)
library(tidyverse)

### Step 1: Census data filtered to Los Angeles
# all of LA county
la_census <- tidycensus::get_acs(
  state = "CA",
  county = "Los Angeles",
  geography = "tract",
  variables = "B25004_001",
  geometry = TRUE,
  year = 2022
)

# filtered to exclude unincorporated areas and islands
la_census_filter <- la_census %>%
  mutate(NAME = gsub(", Los Angeles County, California", # elements that you want to remove
                     "", # replace with blank
                     NAME)) %>%
  mutate(NAME = gsub("Census Tract ", # elements that you want to remove
                     "", # replace with blank
                     NAME)) %>%
  filter(GEOID != "06037599100") %>% # islands
  filter(GEOID != "06037599000") %>% # islands
  filter(GEOID != "06037980003") %>%
  filter(GEOID != "06037980004") %>%
  filter(!(NAME >= 9000 & NAME <= 9800))


# write the data (cuz the census data is v fussy)
# readr::write_csv(la_census_filter, here::here("data", "LA_census.csv"))

### Step 2: Enviroscreen data filtered to Los Angeles
# read in and filter out areas we know we don't want
enviroscreen_sf <- enviroscreen_sf %>%
  janitor::clean_names() %>%
  filter(county == "Los Angeles") %>%
  filter(tract != 6037599100) %>% # islands
  filter(tract != 6037599000) %>% # islands
  filter(tract != 6037980003) %>% # unincorporated
  filter(tract != 6037930101) %>% # forests, unincorporated areas, etc
  filter(tract != 6037930301) %>%
  filter(tract != 6037930200) %>%
  filter(tract != 6037920303)


```

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

### Step 3: join tidy census and enviroscreen
# set crs to be the same as la census tracts
enviroscreen_sf <- st_transform(enviroscreen_sf, st_crs(la_census_filter))

# filter out northern areas so we just have LA itself left
final_enviroscreen <- st_filter(enviroscreen_sf, la_census_filter)
```

### Visualize

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: true

# plot PM 2.5 per census tract
ggplot() +
  geom_sf(data = final_enviroscreen, aes(fill = pm2_5_p), color = 'black', size = 1) +
  scale_fill_distiller(palette = "OrRd", direction = 1) +
  theme_minimal() +
  labs(fill = "PM2.5 Percentile") +
  theme(
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    axis.text = element_blank(),
    axis.title = element_blank())+
  theme_void()
```

Using percentile PM2.5 as opposed to raw PM 2.5 shows more of an EJ POV, as the percentile is a relative ranking of PM2.5 concentrations compared to other census tracts statewide. (ex: A percentile of 90 means the area has higher PM2.5 pollution than 90% of other census tracts in California.)

# Pollution Sources

## Point Sources

### Tidy

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

point_sources <- read.csv(here("data/sources/facility_point_sources_2020.csv")) %>% 
  clean_names()

point_sources <- point_sources %>% 
  filter(pollutant %in% c("PM2.5 Primary (Filt + Cond)", "PM2.5 Filterable"))

# split the lat_lon into two separate columns to create spatial object

point_sources <- point_sources %>%
    # Remove brackets from the lat_long column
    mutate(lat_long = gsub("\\[|\\]", "", lat_lon)) %>%
    # Separate the lat_long column into two columns: longitude and latitude
    separate(lat_long, into = c("longitude", "latitude"), sep = ",") %>%
    # Convert to numeric
    mutate(
        longitude = as.numeric(longitude),
        latitude = as.numeric(latitude)
    )

# Convert to spatial object 
point_sources_sf <- st_as_sf(
  point_sources,
  coords = c("longitude", "latitude"),  # REMINDER: Longitude comes first!
  crs = 4326  # WGS84 CRS 
)

# Transform to match CRS of `final_enviroscreen`
point_sources_sf <- st_transform(point_sources_sf, st_crs(final_enviroscreen))

# filter out northern areas so we just have LA itself left
point_sources_sf <- st_filter(point_sources_sf, final_enviroscreen)

```

### Visualize Spatially

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

ggplot() +
    geom_sf(data = point_sources_sf, aes(color = pollutant)) +
    theme_minimal() +
    labs(title = "Facility Point Sources", color = "Pollutant")

```

There are just so many point sources, so I'm going to try mapping just the top what it I mapped just the top 50 emitters.

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

# only show emissions over 6.1 tons

#convert emissions_tons to numeric: 
point_sources_sf <- point_sources_sf %>%
  mutate(emissions_tons = as.numeric(emissions_tons))

# filter for top 50 emitters
top_point_sources <- point_sources_sf %>% 
  filter(emissions_tons > 6.1)

# filter for major sources only
major_point_sources <- point_sources_sf %>% 
  filter(emissions_tons >= 100)
```

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: true

ggplot() +
  # LA map with PM2.5 fill
  geom_sf(data = final_enviroscreen, aes(fill = pm2_5_p), color = 'black', size = 0.2, alpha = 1) +
  
  # Add facility points with customized colors
  geom_sf(data = top_point_sources, aes(color = pollutant), size = 2, alpha = 1) +
  
  # Fill scale for PM2.5
  scale_fill_distiller(palette = "OrRd", direction = 1, na.value = "gray90") +
  
  # Color scale for pollutant types
  scale_color_manual(
    values = c(
      "PM2.5 Primary (Filt + Cond)" = "cyan",
      "PM2.5 Filterable" = "cyan4"
    )
  ) +
  
  # Minimalist theme
  theme_void()


```

### Visualize by Source Type

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: true

point_sources_plot <- ggplot(top_point_sources, aes(x = reorder(facility_type, emissions_tons), y = emissions_tons)) +
  geom_col() +  
  coord_flip() +  
  labs(
    title = "PM2.5 Emissions - Point Sources (Facilities)",
    x = "Facility Type",
    y = "Emissions (Tons)"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 6)
  )

point_sources_plot


```

## Non-point Sources

### Tidy

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

nonpoint_sources <- read.csv(here("data/sources/nonpoint_sources_2020.csv")) %>% 
  clean_names()

nonpoint_sources <- nonpoint_sources %>% 
  filter(pollutant %in% c("PM2.5 Primary (Filt + Cond)", "PM2.5 Filterable")) %>% 
  
#convert emissions_tons to numeric
  mutate(emissions_tons = as.numeric(emissions_tons)) %>% 
  drop_na()

# filter for top 50 emitters
top_nonpoint_sources <- nonpoint_sources %>% 
  filter(emissions_tons > 6.1)

# filter for major sources only
major_nonpoint_sources <- nonpoint_sources %>% 
  filter(emissions_tons >= 100)
  
```

### Visualize by Source Type

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: true

nonpoint_sources_plot <- ggplot(major_nonpoint_sources, aes(x = reorder(scc_level_2, emissions_tons), y = emissions_tons)) +
  geom_col() +  
  coord_flip() +  
  labs(
    title = "PM2.5 Emissions - Nonpoint",
    x = "scc_level_2",
    y = "Emissions (Tons)"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 6)
  )

nonpoint_sources_plot

```

# Q&A:

1.  What have you learned about your data? Have any potentially interesting patterns emerged?

    I've learned that the main pollutant trends closely follow the overall AQI trend, making it redundant to visualize multiple pollutants in the same way. This insight shifted my approach to a more structured, zoomed-in analysis. I plan to start with a broad view by showing the general air quality trend over time in Los Angeles. From there, I’ll highlight which pollutants contribute the most to poor air quality—particularly PM 2.5. Next, I’ll map PM 2.5 concentrations across Los Angeles to identify hotspots, incorporating environmental justice considerations. Finally, I’ll explore the sources of these pollutants to better understand their origins.

    Overall air quality in Los Angeles has improved over time but appears to have plateaued in recent years. While reductions in pollution levels are evident, major air pollution events (such as the Bobcat Fire in 2020) stand out as significant spikes in the data.

2.  In HW #1, you outlined some questions that you wanted to answer using these data. Have you made any strides towards answering those questions? If yes, how so? If no, what next steps do you need to take (e.g. I need to create X plot type, I still need to track down Y data, I need to restructure existing data so that you can visualize it in Z ways, etc.)?

    Yes, I've made strides toward answering these questions, although my focus has shifted a bit since exploring the data. I now know the overall trends, the largest pollutants, where they are located.

3.  What challenges do you foresee encountering with your data? These can be data wrangling and / or visualization challenges.

    I foresee challenges in integrating multiple layers of analysis into a cohesive narrative. While each component—AQI trends, pollutant breakdown, spatial mapping, and source attribution—is insightful on its own, ensuring a cohesive story and maintaining clarity will be important.
