---
title: "Main Pollutant"
format: html
editor: visual
---

# Main Pollutants

```{r}
# SET UP

#| message: false
#| warning: false

#libraries: 
library(tidyverse)   # dplyr, purrr, etc.
library(janitor)     # for clean_names()
library(lubridate)   # for mdy(), etc
library(here)        # for here()
library(doBy)        # for summaryBy()
library(scales)
library(showtext) # allows us to import google fonts 
library(glue)
library(ggtext)
library(sf)
library(here)

#......................import Google fonts.......................
# `name` is the name of the font as it appears in Google Fonts
# `family` is the user-specified id that you'll use to apply a font in your ggpplot
font_add_google(name = "Montserrat", family = "mont")
font_add_google(name = "Open Sans", family = "open_sans")



#now we need to 'turn show text on'
#......enable {showtext} rendering for all newly opened GDs......
showtext_auto()
```


```{r}
#| message: false
#| warning: false

#CC7E62

smog_pal <- c("#79AAB6", 
              "#B0C7C1", 
              "#E3AC79", 
              "#CC7E62",
              "#B77B70")


smog_pal2 <- c("#79AAB6", 
              "#B0C7C1", 
              "#DFAF75", 
              "#DE8635",
              "#DF674F")

custom_smog_pal <- c(
 "Ozone"= "#79AAB6",
 "PM10" = "#B0C7C1", 
 "CO" = "#DFAF75",  
 "NO2" = "#DE8635",    
 "PM2.5" = "#DF674F"      
)


```

## Import and Wrangle Data

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# data ranges from 2000 - 2024
years <- 2000:2024

# -------- S E T  U P  L O O P  --------
median_aqi_list <- map(years, ~ {
  
      # build the file path
  aqi_file_path <- here("data/aqi_daily", paste0("aqidaily_", .x, ".csv"))
  
# -------- R E A D  I N  D A T A --------
  read_csv(aqi_file_path) %>%
    clean_names() %>%
    
# -------- T I D Y--------
      #transform date from a character to a date
    mutate(date = mdy(date)) %>%
    
      #extract year
    mutate(year = year(date)) %>% 

      #calculate median AQI
    group_by(year) %>%
    summarize(
      median_aqi = median(overall_aqi_value, na.rm = TRUE),
      .groups = "drop")
    
})

# combine into one data frame
median_aqi_df <- bind_rows(median_aqi_list)
```

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| output: false

# -------- S E T  U P  L O O P  --------
common_pollutant_list <- map(years, ~ {
  
  # file path
  aqi_file_path <- here("data/aqi_daily", paste0("aqidaily_", .x, ".csv"))
  
  # -------- R E A D  I N  D A T A --------
  read_csv(aqi_file_path) %>%
    clean_names() %>%
    
    # character to date
    mutate(date = mdy(date)) %>%
    
    # extract year
    mutate(year = year(date)) %>%
    
    select(year, main_pollutant)

})

# Combine all common pollutant calculations into one data frame
common_pollutant_all <- bind_rows(common_pollutant_list)

# ---------- SUMMARIZE BY YEAR ---------

# count occurrences of pollutants for the year
top_pollutants <- common_pollutant_all %>% 
  group_by(year, main_pollutant) %>%
  summarize(count = n(), .groups = "drop") %>% 

  group_by(main_pollutant) %>%
  summarize(avg_count = mean(count), .groups = "drop")

```

## Compute circle layout

```{r}
library(dplyr)
library(packcircles)
library(ggplot2)

# -------- STEP 1:Compute circle layout----------

# circleProgressiveLayoutcalculates the positions and sizes of circles to create a non-overlapping
circle_layout <- circleProgressiveLayout(top_pollutants$avg_count, sizetype = "area")

# Add a small gap between circles
circle_layout$radius <- circle_layout$radius * 0.95

# Add coordinates back to the pollutant data
circle_data <- cbind(top_pollutants, circle_layout)

# create vertices for circle polygons
circle_vertices <- circleLayoutVertices(circle_layout, npoints = 50)

# -------- STEP 2: ADD NESTED CIRCLES ----------
# Generate radius, x, and y coordinates for nested circles
circle_layout_border <- circle_layout
circle_layout_border$radius <- circle_layout$radius * 0.95

# Create vertices for nested circles
circle_vertices_border <- circleLayoutVertices(circle_layout_border, npoints = 50)

# # -------- STEP 3: JOIN TABLES TO ADD LABELS ----------
# 
# Combine the pollutant data with circles (center coordinates and radius)
circle_labels <- cbind(top_pollutants, circle_layout)


```

### Viz:

```{r}
# -------- STEP 4: BASE PLOT(s) ----------

# Create the base plots
gg_circles <- ggplot() +
 # Draw the main circles
 geom_polygon(data = circle_vertices, 
              aes(x = x, y = y, group = id, fill = as.factor(id)), 
              color = "grey90",          # add white borders
              size = 0.2,              # thinner border 
              alpha = 0.9) +           
 theme_void() +     
 coord_equal()
# coord_equal(expand = TRUE, xlim = c(-14.75, 14.75), ylim = c(-14.75, 14.75))  # size of cirlces                     # ensure circles are perfectly round
     

# Add the nested circles layer
gg_circles_nested <- gg_circles +

 geom_polygon(data = circle_vertices_border,
              aes(x = x, y = y, group = id, fill = as.factor(id)),
              color = "grey90",        # match border color of main circles
              size = 0.2,           
              alpha = 0.5)            # more transparent for nested effect

```

```{r}

main_pollutant_circles <- gg_circles_nested +
  # Add text labels inside the circles
  geom_text(data = circle_labels,
            aes(x = x, y = y, 
                size = avg_count,      # text size varies with pollution count
                label = main_pollutant), 
            fontface = "bold",
            family = "mont",          
            color = "#2F2F2F") +   
  scale_fill_manual(values = smog_pal2) +  # custom color palette
  scale_size_continuous(range = c(2, 7)) + # set text size range (small --> large)
  
  theme_void() +  

  # LABS ---  
  labs(
    title = "Pollutant Distribution",  # Main chart title
    subtitle = "Median occurrence of dominant pollutants from 2000 to 2024",  # Subtitle with date range
    caption = "Data: EPA, 2025"  # Data source
  ) +  

  # CUSTOMIZE THEME ---
  theme(
    legend.position = "none",  
    plot.title.position = "plot", 
    plot.caption.position = "plot",  
    
    # title
    plot.title = element_text(family = "mont",  # Use "mont" font
                              face = "bold",  # Make it bold
                              size = 18,  # Increase font size
                              color = "black",  
                              hjust = 0,  # Align to the far left
                              margin = margin(b = 5)),  # Add spacing below title
    
    # subtitle
    plot.subtitle = element_text(family = "open_sans",  
                                 size = 11.5,  
                                 color = "black",
                                 hjust = 0,  
                                 margin = margin(b = 10)), 
    
    # caption
    plot.caption = element_text(family = "open_sans",
                                face = "italic",
                                color = "black",
                                hjust = 1,  
                                margin = margin(t = 15)),  # Add spacing above caption
    
    # overall plot margins
    plot.margin = margin(t = 20, r = 20, b = 20, l = 20)  # Ensure spacing from edges
  )

main_pollutant_circles

```

TRY DONUT

```{r}
# Prepare the data for the donut chart using top_pollutants
donut_data <- top_pollutants %>% 
  # Calculate the fraction of each pollutant and make new columns
  mutate(
    fraction = avg_count / sum(avg_count),
    percent  = round(fraction * 100), # caluclaute the percent from the fration
    # Create a label that shows the pollutant and its percentage
    label    = paste0(main_pollutant, "\n", percent, "%") # reminder: "\n" give you a space
  ) %>% 
  # Arrange in descending order of main pollutant
  arrange(desc(main_pollutant)) %>% 
  
  # Compute cumulative values for the donut slices
  mutate(
    # cumulative sum (cumsum) gives us the upper boundary 
    ymax          = cumsum(fraction), 
   #lag() function shifts the values of ymax down by one row
   # For the very first row, there is no previous value, so default = 0 is used
    ymin          = lag(ymax, default = 0), 
   # if i want to place the labels at the midpoint of the slice - optional
   # calculates the midpoint of each slice by averaging the ymin and ymax.
    labelPosition = (ymax + ymin) / 2
  )

```


```{r}
# Create the donut chart
donut <- ggplot(donut_data, 
                aes(ymax = ymax,   # Upper boundary of the slice
                    ymin = ymin,   # Lower boundary 
                    xmax = 4,      # Outer radius of the donut chart
                    xmin = 3,      # Inner radius 
                    fill = main_pollutant)) +  
  
  # Draw the donut slices
  geom_rect(color = "grey98") +  # Add light gray borders 
  
  # Add labels for slices where the percentage is greater than 1%
  geom_text(aes(x = 3.5, y = labelPosition,  # Position labels at x = 3.5
                label = ifelse(percent > 1, label, "")),  # Only show labels if >1%
            color = "black", size = 3) +
  
  # Add external labels for slices where the percentage is exactly 1%
  geom_text(data = subset(donut_data, round(percent, 1) == 1),  
            aes(x = 4.5, y = labelPosition, label = label),  # Position labels further outside
            color = "black", size = 3, hjust = 0) + 
  
  # Convert the bar chart into a circular donut shape
  coord_polar(theta = "y") +  # Use polar coordinates with the y-axis determining angles
  xlim(c(2, 5)) +  # Expand x-axis limits to make space for outside labels
  
  # Apply a custom color palette
  scale_fill_manual(values = custom_smog_pal) +  
  theme_void() +  
  
# LABS ---  
  labs(
    title = "Pollutant Distribution",  # Main chart title
    subtitle = "Median occurrence of dominant pollutants from 2000 to 2024",  # Subtitle with date range
    caption = "Data: EPA, 2025"  # Data source
  ) +  
  
# CUSTOMIZE THEME ---
  theme(
    legend.position = "none",  # Remove the legend
    plot.title.position = "plot",  # Position title relative to the entire plot
    plot.caption.position = "plot",  # Position caption relative to the entire plot
    
    # title
    plot.title = element_text(family = "mont",  # Use "mont" font
                              face = "bold",  # Make it bold
                              size = 18,  # Increase font size
                              color = "black",  
                              hjust = 0,  # Align to the far left
                              margin = margin(b = 5)),  # Add spacing below title
    
    # subtitle
    plot.subtitle = element_text(family = "open_sans",  
                                 size = 11.5,  
                                 color = "black",
                                 hjust = 0,  # Align to the far left
                                 margin = margin(b = 10)),  # Increase space below subtitle
    
    # caption
    plot.caption = element_text(family = "open_sans",
                                face = "italic",
                                color = "black",
                                hjust = 1,  # Align to the far right
                                margin = margin(t = 15)),  # Add spacing above caption
    
    # overall plot margins
    plot.margin = margin(t = 10, r = 20, b = 10, l = 10)  # Ensure spacing from edges
  )

donut

ggsave("donut_w_labs.pdf", donut, width = 10, height = 6)

```

```{r}

# Create the donut chart using ggplot2
donut_box <- ggplot(donut_data, 
                aes(ymax = ymax,  # Upper limit of each slice
                    ymin = ymin,  # Lower limit 
                    xmax = 4,  # Outer radius of the donut
                    xmin = 3,  # Inner radius 
                    fill = main_pollutant)) + 
  
  # Draw the slices as rectangles
  geom_rect(color = "grey98") +  # Add light grey borders between slices
  
  # Add labels inside each slice
  geom_label(aes(x = 3.5,  # Position labels at the middle of the donut ring
                 y = labelPosition,  # Y-axis position of labels
                 label = label),  # Text to display
             color = "black", size = 3) +  # Label color and font size
  
  # Convert the bar chart into a circular donut chart
  coord_polar(theta = "y") +  

  # Control the thickness of the donut by setting x-axis limits
  xlim(c(2, 4)) +  

  # Apply a custom color palette for pollutants
  scale_fill_manual(values = smog_pal2) +  
  
  # LABS ---  
  labs(
    title = "Pollutant Distribution",  # Main chart title
    subtitle = "Median occurrence of dominant pollutants from 2000 to 2024",  # Subtitle with date range
    caption = "Data: EPA, 2025"  # Data source
  ) +  

  # Remove background, grid, and axes for a clean look
  theme_void() +  

# CUSTOMIZE THEME ---
  theme(
    legend.position = "none",  # Remove the legend
    plot.title.position = "plot",  # Position title relative to the entire plot
    plot.caption.position = "plot",  # Position caption relative to the entire plot
    
    # title
    plot.title = element_text(family = "mont",  # Use "mont" font
                              face = "bold",  # Make it bold
                              size = 18,  # Increase font size
                              color = "black",  
                              hjust = 0,  # Align to the far left
                              margin = margin(b = 5)),  # Add spacing below title
    
    # subtitle
    plot.subtitle = element_text(family = "open_sans",  
                                 size = 11.5,  
                                 color = "black",
                                 hjust = 0,  # Align to the far left
                                 margin = margin(b = 10)),  # Increase space below subtitle
    
    # caption
    plot.caption = element_text(family = "open_sans",
                                face = "italic",
                                color = "black",
                                hjust = 1,  # Align to the far right
                                margin = margin(t = 15)),  # Add spacing above caption
    
    # overall plot margins
    plot.margin = margin(t = 10, r = 20, b = 10, l = 10)  # Ensure spacing from edges
  )


donut_box

# Save 
ggsave("donut.pdf",  # Filename
       donut,  # The ggplot object to save
       width = 10,  # Width of the output file
       height = 6)  # Height of the output file


```
```{r}
# Create the donut chart using ggplot2
donut_box <- ggplot(donut_data, 
                aes(ymax = ymax,  # Upper limit of each slice
                    ymin = ymin,  # Lower limit 
                    xmax = 4,  # Outer radius of the donut
                    xmin = 3,  # Inner radius 
                    fill = main_pollutant)) + 
  
  # Draw the slices as rectangles
  geom_rect(color = "grey98") +  # Add light grey borders between slices
  
  # Labels for slices larger than 1%
  geom_label(data = subset(donut_data, percent > 1),
             aes(x = 3.5, y = labelPosition, label = label), 
             color = "black", 
             size = 3, 
             label.size = 0.2) +  # Thin border around label box
  
  # Labels for 1% slices - move slightly outward
  geom_label(data = subset(donut_data, round(percent, 1) == 1),
            aes(x = 3.9, y = labelPosition, label = label),  
            color = "black", 
            size = 3, 
            label.size = 0.2) +  # Thin border
  
  # Convert the bar chart into a circular donut chart
  coord_polar(theta = "y") +  

  # Increase x-axis limits slightly to fit labels
  xlim(c(2, 4.5)) +  

  # Apply a custom color palette for pollutants
  scale_fill_manual(values = smog_pal2) +  
  
  # LABS ---  
  labs(
    title = "Pollutant Distribution",  # Main chart title
    subtitle = "Median occurrence of dominant pollutants from 2000 to 2024",  # Subtitle with date range
    caption = "Data: EPA, 2025"  # Data source
  ) +  

  # Remove background, grid, and axes for a clean look
  theme_void() +  

# CUSTOMIZE THEME ---
  theme(
    legend.position = "none",  # Remove the legend
    plot.title.position = "plot",  # Position title relative to the entire plot
    plot.caption.position = "plot",  # Position caption relative to the entire plot
    
    # title
    plot.title = element_text(family = "mont",  # Use "mont" font
                              face = "bold",  # Make it bold
                              size = 18,  # Increase font size
                              color = "black",  
                              hjust = 0,  # Align to the far left
                              margin = margin(b = 5)),  # Add spacing below title
    
    # subtitle
    plot.subtitle = element_text(family = "open_sans",  
                                 size = 11.5,  
                                 color = "black",
                                 hjust = 0,  # Align to the far left
                                 margin = margin(b = 10)),  # Increase space below subtitle
    
    # caption
    plot.caption = element_text(family = "open_sans",
                                face = "italic",
                                color = "black",
                                hjust = 1,  # Align to the far right
                                margin = margin(t = 15)),  # Add spacing above caption
    
    # overall plot margins
    plot.margin = margin(t = 10, r = 20, b = 10, l = 10)  # Ensure spacing from edges
  )

donut_box

# Save 
ggsave("donut.pdf",  # Filename
       donut_box,  # The ggplot object to save
       width = 10,  # Width of the output file
       height = 6)  # Height of the output file


```

